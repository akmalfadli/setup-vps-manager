#!/bin/bash
# ======================================================
# VPS Website Manager - Installer (v1.0)
# ======================================================
# Features:
#  - Installs all required packages
#  - Configures backup cron
#  - Installs gdrive CLI
#  - Creates create_website.sh script
#  - Sets up Telegram Bot service
# ======================================================

set -e

echo "🚀 Starting VPS Website Manager Setup..."

# ------------------------------------------------------
# 1️⃣ Update and install dependencies
# ------------------------------------------------------
echo "📦 Installing dependencies..."
apt update -y
apt install -y nginx mysql-server php-fpm php-mysql php-cli php-zip php-curl php-sqlite3 sqlite3 certbot python3-certbot-nginx curl unzip git

# ------------------------------------------------------
# 2️⃣ Setup directories
# ------------------------------------------------------
echo "📁 Setting up directories..."
mkdir -p /var/www/sites
mkdir -p /var/www/backups
mkdir -p /var/www/scripts
chown -R www-data:www-data /var/www

# ------------------------------------------------------
# 3️⃣ Install gdrive CLI
# ------------------------------------------------------
if ! command -v gdrive &> /dev/null; then
  echo "☁️ Installing gdrive CLI..."
  wget -q -O /usr/local/bin/gdrive https://github.com/prasmussen/gdrive/releases/download/2.1.1/gdrive-linux-x64
  chmod +x /usr/local/bin/gdrive
fi

# ------------------------------------------------------
# 4️⃣ Create SQLite database
# ------------------------------------------------------
DB_PATH="/var/www/sites.db"
if [ ! -f "$DB_PATH" ]; then
  echo "🧱 Creating SQLite database..."
  sqlite3 "$DB_PATH" "CREATE TABLE IF NOT EXISTS sites (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    domain TEXT,
    db_name TEXT,
    db_user TEXT,
    created_at TEXT
  );"
fi

# ------------------------------------------------------
# 5️⃣ Ask user for configuration
# ------------------------------------------------------
echo "⚙️ Configuration setup:"
read -p "Enter your Telegram Bot Token: " TELEGRAM_TOKEN
read -p "Enter your Telegram Chat ID: " TELEGRAM_CHAT_ID
read -p "Enter your Google Drive Folder ID for backups: " GDRIVE_FOLDER_ID

PHP_SOCKET=$(find /run/php -name "php*-fpm.sock" | head -n 1)
if [ -z "$PHP_SOCKET" ]; then
  echo "❌ Could not find PHP-FPM socket!"
  exit 1
fi

# ------------------------------------------------------
# 6️⃣ Create main manager script
# ------------------------------------------------------
echo "🧠 Creating create_website.sh..."
cat > /var/www/create_website.sh <<EOF
#!/bin/bash
# Auto-generated by setup_vps_manager.sh
DB_PATH="/var/www/sites.db"
NGINX_SITES="/etc/nginx/sites-available"
NGINX_ENABLED="/etc/nginx/sites-enabled"
WWW_PATH="/var/www/sites"
BACKUP_PATH="/var/www/backups"
TELEGRAM_TOKEN="${TELEGRAM_TOKEN}"
TELEGRAM_CHAT_ID="${TELEGRAM_CHAT_ID}"
GDRIVE_FOLDER_ID="${GDRIVE_FOLDER_ID}"
PHP_SOCKET="${PHP_SOCKET}"

$(curl -s https://raw.githubusercontent.com/openai-chatgpt-id/vps-manager/main/create_website_core_v3.sh || echo "# Core script missing! Please paste manually.")
EOF

chmod +x /var/www/create_website.sh

# ------------------------------------------------------
# 7️⃣ Create Telegram Bot listener service
# ------------------------------------------------------
echo "🤖 Installing Telegram Bot listener..."
cat > /var/www/telegram_bot.py <<'PYCODE'
#!/usr/bin/env python3
import os, requests, time, subprocess, psutil

TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
SCRIPT = "/var/www/create_website.sh"
PIN_CODE = os.getenv("BOT_PIN", "1234")

def send(msg):
    requests.post(f"https://api.telegram.org/bot{TOKEN}/sendMessage",
                  data={"chat_id": CHAT_ID, "text": msg})

def get_status():
    cpu = psutil.cpu_percent(interval=1)
    ram = psutil.virtual_memory().percent
    disk = psutil.disk_usage("/").percent
    return f"📊 VPS Status:\nCPU: {cpu}%\nRAM: {ram}%\nDisk: {disk}%"

def handle_command(text):
    if text.startswith("/backup "):
        domain = text.split(" ",1)[1]
        subprocess.run([SCRIPT, "--backup", domain])
        send(f"💾 Backup for {domain} completed.")
    elif text.startswith("/renew_ssl "):
        domain = text.split(" ",1)[1]
        pin = input("Enter PIN: ")
        if pin == PIN_CODE:
            subprocess.run([SCRIPT, "--renew-ssl", domain])
            send(f"🔐 SSL renewed for {domain}")
        else:
            send("❌ Wrong PIN")
    elif text.startswith("/ssl_status "):
        domain = text.split(" ",1)[1]
        result = subprocess.check_output([SCRIPT, "--ssl-status", domain]).decode()
        send(f"🔎 SSL Status for {domain}:\n{result}")
    elif text.startswith("/list"):
        result = subprocess.check_output([SCRIPT, "--list"]).decode()
        send(f"🌐 Websites:\n{result}")
    elif text.startswith("/info "):
        domain = text.split(" ",1)[1]
        result = subprocess.check_output([SCRIPT, "--info", domain]).decode()
        send(f"ℹ️ Info for {domain}:\n{result}")
    elif text.startswith("/status"):
        send(get_status())
    else:
        send("⚠️ Unknown command")

def listen():
    last_update = 0
    while True:
        try:
            resp = requests.get(f"https://api.telegram.org/bot{TOKEN}/getUpdates?offset={last_update+1}").json()
            for update in resp.get("result", []):
                last_update = update["update_id"]
                msg = update["message"]["text"]
                if str(update["message"]["chat"]["id"]) == CHAT_ID:
                    handle_command(msg)
        except Exception as e:
            print("Error:", e)
        time.sleep(3)

if __name__ == "__main__":
    send("🤖 Telegram Bot started!")
    listen()
PYCODE

chmod +x /var/www/telegram_bot.py

# ------------------------------------------------------
# 8️⃣ Create systemd service for bot
# ------------------------------------------------------
cat > /etc/systemd/system/telegram-bot.service <<EOF
[Unit]
Description=Telegram Bot Listener
After=network.target

[Service]
Environment="TELEGRAM_TOKEN=${TELEGRAM_TOKEN}"
Environment="TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}"
Environment="BOT_PIN=1234"
ExecStart=/usr/bin/python3 /var/www/telegram_bot.py
Restart=always

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable telegram-bot
systemctl start telegram-bot

# ------------------------------------------------------
# 9️⃣ Setup cron jobs
# ------------------------------------------------------
echo "🕒 Setting up cron jobs..."
(crontab -l 2>/dev/null; echo "0 2 * * * /usr/bin/certbot renew --quiet && systemctl reload nginx") | crontab -
(crontab -l 2>/dev/null; echo "0 3 * * * /var/www/create_website.sh --auto-backup >/dev/null 2>&1") | crontab -

# ------------------------------------------------------
# 🔟 Final message
# ------------------------------------------------------
echo "✅ VPS Website Manager setup completed!"
echo "---------------------------------------------------"
echo "Script Path:       /var/www/create_website.sh"
echo "Database:          /var/www/sites.db"
echo "Backup Path:       /var/www/backups"
echo "Telegram Bot:      systemctl status telegram-bot"
echo "Google Drive ID:   ${GDRIVE_FOLDER_ID}"
echo "---------------------------------------------------"
echo "Run now with:      bash /var/www/create_website.sh"

